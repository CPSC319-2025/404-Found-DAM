// <auto-generated />
using System;
using Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250301213354_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataModel.Asset", b =>
                {
                    b.Property<int>("BlobID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlobID"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BlobID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UserID");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("DataModel.AssetMetadata", b =>
                {
                    b.Property<int>("BlobID")
                        .HasColumnType("int");

                    b.Property<int>("FieldID")
                        .HasColumnType("int");

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BlobID", "FieldID");

                    b.HasIndex("FieldID");

                    b.ToTable("AssetMetadata");
                });

            modelBuilder.Entity("DataModel.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LogID");

                    b.HasIndex("UserID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("DataModel.MetadataField", b =>
                {
                    b.Property<int>("FieldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldID"));

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaletteID")
                        .HasColumnType("int");

                    b.HasKey("FieldID");

                    b.HasIndex("PaletteID");

                    b.ToTable("MetadataFields");
                });

            modelBuilder.Entity("DataModel.Palette", b =>
                {
                    b.Property<int>("PaletteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaletteID"));

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.HasKey("PaletteID");

                    b.HasIndex("ProjectID")
                        .IsUnique();

                    b.ToTable("Palettes");
                });

            modelBuilder.Entity("DataModel.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DataModel.ProjectMembership", b =>
                {
                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ProjectID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("ProjectMemberships");
                });

            modelBuilder.Entity("DataModel.ProjectMetadataField", b =>
                {
                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int>("FieldID")
                        .HasColumnType("int");

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID", "FieldID");

                    b.HasIndex("FieldID");

                    b.ToTable("ProjectMetadataFields");
                });

            modelBuilder.Entity("DataModel.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DataModel.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataModel.Asset", b =>
                {
                    b.HasOne("DataModel.Project", "Project")
                        .WithMany("Assets")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.User", "User")
                        .WithMany("Assets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModel.AssetMetadata", b =>
                {
                    b.HasOne("DataModel.Asset", "Asset")
                        .WithMany("AssetMetadata")
                        .HasForeignKey("BlobID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.MetadataField", "MetadataField")
                        .WithMany("AssetMetadata")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("MetadataField");
                });

            modelBuilder.Entity("DataModel.Log", b =>
                {
                    b.HasOne("DataModel.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModel.MetadataField", b =>
                {
                    b.HasOne("DataModel.Palette", "Palette")
                        .WithMany("MetadataFields")
                        .HasForeignKey("PaletteID");

                    b.Navigation("Palette");
                });

            modelBuilder.Entity("DataModel.Palette", b =>
                {
                    b.HasOne("DataModel.Project", "Project")
                        .WithOne("Palette")
                        .HasForeignKey("DataModel.Palette", "ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataModel.ProjectMembership", b =>
                {
                    b.HasOne("DataModel.Project", "Project")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataModel.ProjectMetadataField", b =>
                {
                    b.HasOne("DataModel.MetadataField", "MetadataField")
                        .WithMany("ProjectMetadataFields")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataModel.Project", "Project")
                        .WithMany("ProjectMetadataFields")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetadataField");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DataModel.Asset", b =>
                {
                    b.Navigation("AssetMetadata");
                });

            modelBuilder.Entity("DataModel.MetadataField", b =>
                {
                    b.Navigation("AssetMetadata");

                    b.Navigation("ProjectMetadataFields");
                });

            modelBuilder.Entity("DataModel.Palette", b =>
                {
                    b.Navigation("MetadataFields");
                });

            modelBuilder.Entity("DataModel.Project", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Palette")
                        .IsRequired();

                    b.Navigation("ProjectMemberships");

                    b.Navigation("ProjectMetadataFields");
                });

            modelBuilder.Entity("DataModel.User", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Logs");

                    b.Navigation("ProjectMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
